/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (tasks, subtasks, schedule entries, and reminders).  Focus tips are globally
 * accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks for each task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries for each user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for each user.
 * - /focusTips/{focusTipId}: Stores focus tips accessible to all users.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the owning user.
 * - Tasks, subtasks, schedule entries, and reminders are owned by the user and only accessible to that user.
 * - Focus tips are publicly readable.
 * - Listing of user documents is allowed only to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId && request.auth.token.email_verified == true;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for tasks within a user's profile.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - A user can create a task within their own profile.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own tasks.
     * @deny (create) - A user cannot create a task within another user's profile.
     * @deny (update, delete) - A user cannot update or delete another user's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId && request.auth.token.email_verified == true;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for subtasks within a task.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - A user can create a subtask within their own task.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own subtasks.
     * @deny (create) - A user cannot create a subtask within another user's task.
     * @deny (update, delete) - A user cannot update or delete another user's subtasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId && request.auth.token.email_verified == true;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for schedule entries within a user's profile.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - A user can create a schedule entry within their own profile.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own schedule entries.
     * @deny (create) - A user cannot create a schedule entry within another user's profile.
     * @deny (update, delete) - A user cannot update or delete another user's schedule entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId && request.auth.token.email_verified == true;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for reminders within a user's profile.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - A user can create a reminder within their own profile.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own reminders.
     * @deny (create) - A user cannot create a reminder within another user's profile.
     * @deny (update, delete) - A user cannot update or delete another user's reminders.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId && request.auth.token.email_verified == true;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to focus tips.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) - Any user can read focus tips.
     * @deny (create, update, delete) - No user can create, update, or delete focus tips without proper authorization. // TODO: Add admin role to create, update, or delete focus tips.
     * @principle Allows public read access while restricting write access.
     */
    match /focusTips/{focusTipId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role to create, update, or delete focus tips.
    }
  }
}