/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (tasks, subtasks, schedule entries, reminders). Only the authenticated user
 * can read and write their own data. Focus tips are globally readable.
 *
 * Data Structure:
 * Data is organized hierarchically.  User profiles are stored in
 * `/users/{userId}`.  Tasks, subtasks, schedule entries, and reminders are
 * nested under their respective user documents. Focus tips are stored in the
 * top-level `/focusTips` collection.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Focus tips are publicly readable.
 * - Data consistency is enforced between document IDs and path parameters
 *   for user-owned data.
 *
 * Denormalization for Authorization:
 * - The `userId` is included within task, scheduleEntry, and reminder documents
 *   to allow for direct ownership checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a helper function to check if the current user is the owner.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {bool} True if the user is signed in and the provided userId matches the request's auth UID.
     * @principle Path-based ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the user is signed in.
     * @return {bool} True if the user is signed in.
     * @principle Verified identity.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the current user is the existing owner and the document exists.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {bool} True if the user is signed in, the provided userId matches the request's auth UID and the resource exists.
     * @principle Checks the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) If the user's auth UID matches the userId, a user document can be created.
     * @allow (get, list, update, delete) If the user's auth UID matches the userId, the user document can be read, updated and deleted.
     * @deny (create) If the user's auth UID does not match the userId, user creation is denied.
     * @deny (get, list, update, delete) If the user's auth UID does not match the userId, access to the user document is denied.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for tasks owned by a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) If the user's auth UID matches the userId, a task can be created.
     * @allow (get, list, update, delete) If the user's auth UID matches the userId, the task can be read, updated and deleted.
     * @deny (create) If the user's auth UID does not match the userId, task creation is denied.
     * @deny (get, list, update, delete) If the user's auth UID does not match the userId, access to the task is denied.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for subtasks belonging to a specific task.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) If the user's auth UID matches the userId, a subtask can be created.
     * @allow (get, list, update, delete) If the user's auth UID matches the userId, the subtask can be read, updated and deleted.
     * @deny (create) If the user's auth UID does not match the userId, subtask creation is denied.
     * @deny (get, list, update, delete) If the user's auth UID does not match the userId, access to the subtask is denied.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for schedule entries owned by a specific user.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) If the user's auth UID matches the userId, a schedule entry can be created.
     * @allow (get, list, update, delete) If the user's auth UID matches the userId, the schedule entry can be read, updated and deleted.
     * @deny (create) If the user's auth UID does not match the userId, schedule entry creation is denied.
     * @deny (get, list, update, delete) If the user's auth UID does not match the userId, access to the schedule entry is denied.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for reminders owned by a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) If the user's auth UID matches the userId, a reminder can be created.
     * @allow (get, list, update, delete) If the user's auth UID matches the userId, the reminder can be read, updated and deleted.
     * @deny (create) If the user's auth UID does not match the userId, reminder creation is denied.
     * @deny (get, list, update, delete) If the user's auth UID does not match the userId, access to the reminder is denied.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to focus tips, but restricts writes.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) Any user can read focus tips.
     * @deny (create, update, delete) Only authenticated users can create, update and delete focus tips.
     * @principle Allows public read access with restricted writes.
     */
    match /focusTips/{focusTipId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}