/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  All data is nested under /users/{userId},
 * and each user can only access their own data.  This prevents unauthorized access to other users' information.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including profile information, BMI history, tasks, and missions.
 *
 * Key Security Decisions:
 * - Users can only create their own user document (self-registration).
 * - Users can only read and write their own data within their /users/{userId} subtree.
 * - Listing other users is explicitly denied.
 * - The `id` of the document must match the `userId` in the path for user documents.
 *
 * Denormalization for Authorization:
 * The rules rely on the path /users/{userId} to enforce ownership.  The User, BMI, Task, and Mission entities MUST have a 'userId' field
 * that matches the userId path segment. The rules will enforce that the userId field matches the authenticated user's UID on creation
 * and that it remains immutable on updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'testUID' can create their own user document with id == 'testUID'.
     * @deny (create) User with UID 'testUID' cannot create a user document with id == 'otherUID'.
     * @allow (get, update, delete) User with UID 'testUID' can get, update, and delete their own user document.
     * @deny (get, update, delete) User with UID 'testUID' cannot get, update, or delete another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of user documents

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // enforce immutability of id (userId)
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/bmiHistory/{bmiId} documents.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) User with UID 'testUID' can create a BMI document under their user document.
     * @deny (create) User with UID 'testUID' cannot create a BMI document under another user's document.
     * @allow (get, update, delete) User with UID 'testUID' can get, update, and delete their own BMI documents.
     * @deny (get, update, delete) User with UID 'testUID' cannot get, update, or delete another user's BMI documents.
     * @principle Enforces document ownership for writes within the bmiHistory subcollection.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /users/{userId}/tasks/{taskId} documents.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'testUID' can create a task document under their user document.
     * @deny (create) User with UID 'testUID' cannot create a task document under another user's document.
     * @allow (get, update, delete) User with UID 'testUID' can get, update, and delete their own task documents.
     * @deny (get, update, delete) User with UID 'testUID' cannot get, update, or delete another user's task documents.
     * @principle Enforces document ownership for writes within the tasks subcollection.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for /users/{userId}/missions/{missionId} documents.
      * @path /users/{userId}/missions/{missionId}
      * @allow (create) User with UID 'testUID' can create a mission document under their user document.
      * @deny (create) User with UID 'testUID' cannot create a mission document under another user's document.
      * @allow (get, update, delete) User with UID 'testUID' can get, update, and delete their own mission documents.
      * @deny (get, update, delete) User with UID 'testUID' cannot get, update, or delete another user's mission documents.
      * @principle Enforces document ownership for writes within the missions subcollection.
      */
    match /users/{userId}/missions/{missionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }
  }
}