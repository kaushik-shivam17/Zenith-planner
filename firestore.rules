/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data,
 * while allowing public read access to global data like focus tips.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks owned by a specific user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks belonging to a specific task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries for a specific user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a specific user.
 * - /focusTips/{focusTipId}: Stores global focus tips, accessible to all users.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user, based on their UID.
 * - Focus tips are publicly readable but not writable by users.
 * - List operations are generally allowed for user-owned subcollections,
 *   enabling clients to efficiently retrieve data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - User cannot create a profile for another user.
     * @deny (get) - User cannot read another user's profile.
     * @deny (update) - User cannot update another user's profile.
     * @deny (delete) - User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents within a user's profile.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create a task under their profile.
     * @allow (get) - Authenticated user can read a task under their profile.
     * @allow (update) - Authenticated user can update a task under their profile.
     * @allow (delete) - Authenticated user can delete a task under their profile.
     * @deny (create) - User cannot create a task under another user's profile.
     * @deny (get) - User cannot read a task under another user's profile.
     * @deny (update) - User cannot update a task under another user's profile.
     * @deny (delete) - User cannot delete a task under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subtask documents within a task.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - Authenticated user can create a subtask under their task.
     * @allow (get) - Authenticated user can read a subtask under their task.
     * @allow (update) - Authenticated user can update a subtask under their task.
     * @allow (delete) - Authenticated user can delete a subtask under their task.
     * @deny (create) - User cannot create a subtask under another user's task.
     * @deny (get) - User cannot read a subtask under another user's task.
     * @deny (update) - User cannot update a subtask under another user's task.
     * @deny (delete) - User cannot delete a subtask under another user's task.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to schedule entry documents within a user's profile.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - Authenticated user can create a schedule entry under their profile.
     * @allow (get) - Authenticated user can read a schedule entry under their profile.
     * @allow (update) - Authenticated user can update a schedule entry under their profile.
     * @allow (delete) - Authenticated user can delete a schedule entry under their profile.
     * @deny (create) - User cannot create a schedule entry under another user's profile.
     * @deny (get) - User cannot read a schedule entry under another user's profile.
     * @deny (update) - User cannot update a schedule entry under another user's profile.
     * @deny (delete) - User cannot delete a schedule entry under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to reminder documents within a user's profile.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - Authenticated user can create a reminder under their profile.
     * @allow (get) - Authenticated user can read a reminder under their profile.
     * @allow (update) - Authenticated user can update a reminder under their profile.
     * @allow (delete) - Authenticated user can delete a reminder under their profile.
     * @deny (create) - User cannot create a reminder under another user's profile.
     * @deny (get) - User cannot read a reminder under another user's profile.
     * @deny (update) - User cannot update a reminder under another user's profile.
     * @deny (delete) - User cannot delete a reminder under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to focus tip documents.
     * @path /focusTips/{focusTipId}
     * @allow (get) - Any user can read focus tips.
     * @allow (list) - Any user can list focus tips.
     * @deny (create) - No user can create focus tips.
     * @deny (update) - No user can update focus tips.
     * @deny (delete) - No user can delete focus tips.
     * @principle Allows public read access, denies all write access.
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}