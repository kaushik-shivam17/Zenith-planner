/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for all user-related data
 * (tasks, subtasks, schedule entries, reminders) stored under the `/users/{userId}` path. Focus tips
 * are global and publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for a specific user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks for a given task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries for a user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a user.
 * - /focusTips/{focusTipId}: Stores global focus tips.
 *
 * Key Security Decisions:
 * - User data is private and accessible only to the user who owns it.
 * - Focus tips are publicly readable but not writable by users.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - All documents under `/users/{userId}` are implicitly owned by the user identified by `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn helper function.
     * @returns {boolean} True if the request is authenticated; otherwise, false.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner helper function.
     * @param {string} userId - The user ID to check against the request's auth UID.
     * @returns {boolean} True if the provided userId matches the request's auth UID; otherwise, false.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Validates that the document exists and the user is the owner.
     * @param {string} userId - The user ID to check for ownership.
     * @returns {boolean} True if the user is the owner and the resource exists; otherwise, false.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for tasks under a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - A user can create a task under their own user ID.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own tasks.
     * @deny (create) - A user cannot create a task under another user's ID.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete tasks belonging to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for subtasks under a specific task.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - A user can create a subtask under their own task.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own subtasks.
     * @deny (create) - A user cannot create a subtask under another user's task.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete subtasks belonging to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for schedule entries under a specific user.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - A user can create a schedule entry under their own user ID.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own schedule entries.
     * @deny (create) - A user cannot create a schedule entry under another user's ID.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete schedule entries belonging to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for reminders under a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - A user can create a reminder under their own user ID.
     * @allow (get, list, update, delete) - A user can read, update, and delete their own reminders.
     * @deny (create) - A user cannot create a reminder under another user's ID.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete reminders belonging to other users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for focus tips.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) - All users can read focus tips.
     * @deny (create, update, delete) - No users can create, update, or delete focus tips.
     * @principle Focus tips are publicly readable.
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}