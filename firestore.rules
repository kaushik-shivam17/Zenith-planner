/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to global focus tips. All write operations are restricted to
 * authenticated users who own the data, based on path matching and validated ownership fields.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user.
 * - /users/{userId}/timetableEvents/{timetableEventId}: Stores timetable events for each user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for each user.
 * - /focus_tips/{focusTipId}: Stores global focus tips (public read).
 *
 * Key Security Decisions:
 * - Users can only read and write their own data in their respective subcollections.
 * - Focus tips are publicly readable but not writable by clients.
 * - Data validation is limited to ensuring ownership consistency (e.g., userId in path matches document).
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the {userId} path parameter with the `userId` field
 *   in the document data. This avoids the need for additional `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * - User-specific data is stored in user-owned subcollections, while public data (focus tips)
 *   is stored in a top-level collection. This separation simplifies access control and
 *   improves the security of `list` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User attempts to create a profile with an ID that doesn't match their auth UID.
     * @deny (get, list, update, delete) - User attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isOwner function to validate ownership
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      // isExistingOwner function to validate existing document ownership
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to tasks for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user creates a task under their user ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own tasks.
     * @deny (create) - User attempts to create a task for another user.
     * @deny (get, list, update, delete) - User attempts to access another user's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      // isOwner function to validate ownership
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      // isExistingOwner function to validate existing document ownership
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to timetable events for a specific user.
     * @path /users/{userId}/timetableEvents/{timetableEventId}
     * @allow (create) - Authenticated user creates a timetable event under their user ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own timetable events.
     * @deny (create) - User attempts to create a timetable event for another user.
     * @deny (get, list, update, delete) - User attempts to access another user's timetable events.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/timetableEvents/{timetableEventId} {
      // isOwner function to validate ownership
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      // isExistingOwner function to validate existing document ownership
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to reminders for a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - Authenticated user creates a reminder under their user ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own reminders.
     * @deny (create) - User attempts to create a reminder for another user.
     * @deny (get, list, update, delete) - User attempts to access another user's reminders.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      // isOwner function to validate ownership
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      // isExistingOwner function to validate existing document ownership
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to focus tips.
     * @path /focus_tips/{focusTipId}
     * @allow (get, list) - Any user can read focus tips.
     * @deny (create, update, delete) - No user can create, update, or delete focus tips.
     * @principle Allows public read access while restricting write access.
     */
    match /focus_tips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}