/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data, and no data is publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/bmiHistory/{bmiId}: Stores BMI history for each user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user.
 * - /users/{userId}/missions/{missionId}: Stores missions for each user.
 *
 * Key Security Decisions:
 * - Users can only create their own user document and cannot modify other user documents.
 * - Users can only read and write their own BMI history records.
 * - Users can only read and write their own tasks.
 * - Users can only read and write their own missions.
 * - No data is listable publicly - only the owner can list their own data.
 *
 * Denormalization for Authorization:
 *  - The `userId` is used in the path for all subcollections to enable
 *    efficient ownership checks without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (get) User with UID 'user456' cannot read user profile with ID 'user123'.
     * @deny (update) User with UID 'user456' cannot update user profile with ID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete user profile with ID 'user123'.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to BMI history documents for a specific user.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) User with UID 'user123' can create a BMI record under their profile.
     * @allow (get) User with UID 'user123' can read their own BMI record.
     * @allow (update) User with UID 'user123' can update their own BMI record.
     * @allow (delete) User with UID 'user123' can delete their own BMI record.
     * @deny (create) User with UID 'user456' cannot create a BMI record under user profile with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read BMI record with ID 'bmi123' under user profile with ID 'user123'.
     * @deny (update) User with UID 'user456' cannot update BMI record with ID 'bmi123' under user profile with ID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete BMI record with ID 'bmi123' under user profile with ID 'user123'.
     * @principle Enforces user ownership for BMI history data.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to task documents for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'user123' can create a task under their profile.
     * @allow (get) User with UID 'user123' can read their own task.
     * @allow (update) User with UID 'user123' can update their own task.
     * @allow (delete) User with UID 'user123' can delete their own task.
     * @deny (create) User with UID 'user456' cannot create a task under user profile with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read task with ID 'task123' under user profile with ID 'user123'.
     * @deny (update) User with UID 'user456' cannot update task with ID 'task123' under user profile with ID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete task with ID 'task123' under user profile with ID 'user123'.
     * @principle Enforces user ownership for task data.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

     /**
     * @description Controls access to mission documents for a specific user.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) User with UID 'user123' can create a mission under their profile.
     * @allow (get) User with UID 'user123' can read their own mission.
     * @allow (list) User with UID 'user123' can list their own mission.
     * @allow (update) User with UID 'user123' can update their own mission.
     * @allow (delete) User with UID 'user123' can delete their own mission.
     * @deny (create) User with UID 'user456' cannot create a mission under user profile with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read mission with ID 'mission123' under user profile with ID 'user123'.
     * @deny (list) User with UID 'user456' cannot list missions under user profile with ID 'user123'.
     * @deny (update) User with UID 'user456' cannot update mission with ID 'mission123' under user profile with ID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete mission with ID 'mission123' under user profile with ID 'user123'.
     * @principle Enforces user ownership for mission data.
     */
    match /users/{userId}/missions/{missionId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}