/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for
 * personal data (tasks, schedule entries, reminders), ensuring that only the
 * authenticated user can access their own data. Focus tips are public and
 * accessible to all users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks owned by a specific user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks for tasks.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries for a user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a user.
 * - /focusTips/{focusTipId}: Stores global, publicly accessible focus tips.
 *
 * Key Security Decisions:
 * - User data is strictly segregated under the /users/{userId} path.
 * - All subcollections under a user are also protected by ownership.
 * - Focus tips are globally readable.
 * - No user listing is allowed.
 * - Data validation is minimal for prototyping; focus is on authorization.
 *
 * Denormalization for Authorization: The data structure avoids the need for
 * `get()` calls by nesting user-owned data directly under the user's path.
 * For example, tasks are stored under /users/{userId}/tasks/{taskId}, allowing
 * rules to simply check if request.auth.uid == userId.
 *
 * Structural Segregation: Public focus tips are stored in a separate
 * top-level collection (/focusTips) to avoid mixing public and private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with ID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read profile with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update profile with ID 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects tasks, ensuring only the owner user can manage them.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task under their profile.
     * @allow (get) User with ID 'user123' can read a task under their profile.
     * @allow (list) User with ID 'user123' can list tasks under their profile.
     * @allow (update) User with ID 'user123' can update a task under their profile.
     * @allow (delete) User with ID 'user123' can delete a task under their profile.
     * @deny (create) User with ID 'user456' cannot create a task under 'user123' profile.
     * @deny (get) User with ID 'user456' cannot read a task under 'user123' profile.
     * @deny (list) User with ID 'user456' cannot list tasks under 'user123' profile.
     * @deny (update) User with ID 'user456' cannot update a task under 'user123' profile.
     * @deny (delete) User with ID 'user456' cannot delete a task under 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects subtasks, ensuring only the owner user can manage them.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) User with ID 'user123' can create a subtask under their task.
     * @allow (get) User with ID 'user123' can read a subtask under their task.
     * @allow (list) User with ID 'user123' can list subtasks under their task.
     * @allow (update) User with ID 'user123' can update a subtask under their task.
     * @allow (delete) User with ID 'user123' can delete a subtask under their task.
     * @deny (create) User with ID 'user456' cannot create a subtask under 'user123' task.
     * @deny (get) User with ID 'user456' cannot read a subtask under 'user123' task.
     * @deny (list) User with ID 'user456' cannot list subtasks under 'user123' task.
     * @deny (update) User with ID 'user456' cannot update a subtask under 'user123' task.
     * @deny (delete) User with ID 'user456' cannot delete a subtask under 'user123' task.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects schedule entries, ensuring only the owner user can manage them.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) User with ID 'user123' can create a schedule entry under their profile.
     * @allow (get) User with ID 'user123' can read a schedule entry under their profile.
     * @allow (list) User with ID 'user123' can list schedule entries under their profile.
     * @allow (update) User with ID 'user123' can update a schedule entry under their profile.
     * @allow (delete) User with ID 'user123' can delete a schedule entry under their profile.
     * @deny (create) User with ID 'user456' cannot create a schedule entry under 'user123' profile.
     * @deny (get) User with ID 'user456' cannot read a schedule entry under 'user123' profile.
     * @deny (list) User with ID 'user456' cannot list schedule entries under 'user123' profile.
     * @deny (update) User with ID 'user456' cannot update a schedule entry under 'user123' profile.
     * @deny (delete) User with ID 'user456' cannot delete a schedule entry under 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects reminders, ensuring only the owner user can manage them.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) User with ID 'user123' can create a reminder under their profile.
     * @allow (get) User with ID 'user123' can read a reminder under their profile.
     * @allow (list) User with ID 'user123' can list reminders under their profile.
     * @allow (update) User with ID 'user123' can update a reminder under their profile.
     * @allow (delete) User with ID 'user123' can delete a reminder under their profile.
     * @deny (create) User with ID 'user456' cannot create a reminder under 'user123' profile.
     * @deny (get) User with ID 'user456' cannot read a reminder under 'user123' profile.
     * @deny (list) User with ID 'user456' cannot list reminders under 'user123' profile.
     * @deny (update) User with ID 'user456' cannot update a reminder under 'user123' profile.
     * @deny (delete) User with ID 'user456' cannot delete a reminder under 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Protects timetable events, ensuring only the owner user can manage them.
      * @path /users/{userId}/timetableEvents/{eventId}
      * @allow (create) User with ID 'user123' can create a timetable event under their profile.
      * @allow (get) User with ID 'user123' can read a timetable event under their profile.
      * @allow (list) User with ID 'user123' can list timetable events under their profile.
      * @allow (update) User with ID 'user123' can update a timetable event under their profile.
      * @allow (delete) User with ID 'user123' can delete a timetable event under their profile.
      * @deny (create) User with ID 'user456' cannot create a timetable event under 'user123' profile.
      * @deny (get) User with ID 'user456' cannot read a timetable event under 'user123' profile.
      * @deny (list) User with ID 'user456' cannot list timetable events under 'user123' profile.
      * @deny (update) User with ID 'user456' cannot update a timetable event under 'user123' profile.
      * @deny (delete) User with ID 'user456' cannot delete a timetable event under 'user123' profile.
      * @principle Enforces document ownership for all operations.
      */
    match /users/{userId}/timetableEvents/{eventId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read-only access to focus tips.
     * @path /focusTips/{focusTipId}
     * @allow (get) Any user can read a focus tip.
     * @allow (list) Any user can list focus tips.
     * @deny (create) No user can create a focus tip. // TODO: Add admin validation if needed
     * @deny (update) No user can update a focus tip. // TODO: Add admin validation if needed
     * @deny (delete) No user can delete a focus tip. // TODO: Add admin validation if needed
     * @principle Allows public read access with restricted writes.
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation if needed
      allow update: if false; // TODO: Add admin validation if needed
      allow delete: if false; // TODO: Add admin validation if needed
    }
  }

  /**
   * @description Checks if the request is made by the owner of the resource.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {boolean} True if the request is made by the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the request is made by the owner of the resource and the resource exists.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {boolean} True if the request is made by the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }
}