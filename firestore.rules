/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the Zenith Planner application.
 *
 * Data Structure:
 * - All data is nested under /users/{userId}, ensuring that each user's data is isolated.
 * - Subcollections under each user (tasks, missions, timetableEvents) further organize the data.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of user documents is denied to prevent user enumeration.
 * - Data consistency is enforced by validating the userId field within documents against the path.
 *
 * Denormalization for Authorization:
 * - The `userId` field within each document (task, mission, goal, timetableEvent) is used for authorization, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (list) - Listing users is not allowed.
     * @deny (create) - Creating a user with an ID that does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to task documents for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, update, delete, list) - Authenticated user can only access their own tasks.
     * @deny (create) - Creating a task with a userId that does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to mission documents for a specific user.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create, get, update, delete, list) - Authenticated user can only access their own missions.
     * @deny (create) - Creating a mission with a userId that does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/missions/{missionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to goal documents for a specific mission.
     * @path /users/{userId}/missions/{missionId}/goals/{goalId}
     * @allow (create, get, update, delete, list) - Authenticated user can only access their own goals within their own missions.
     * @deny (create) - Creating a goal with a userId that does not match the authenticated user's UID.
     * @principle Enforces document ownership and relational integrity for all operations.
     */
    match /users/{userId}/missions/{missionId}/goals/{goalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to timetable event documents for a specific user.
     * @path /users/{userId}/timetableEvents/{eventId}
     * @allow (create, get, update, delete, list) - Authenticated user can only access their own timetable events.
     * @deny (create) - Creating a timetable event with a userId that does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/timetableEvents/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }
  }
}