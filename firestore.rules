/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for most data,
 * with the exception of global focus tips. Only authenticated users can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks owned by a specific user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks belonging to a specific task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries for a specific user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a specific user.
 * - /focusTips/{focusTipId}: Stores global focus tips, accessible to all users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All user-owned data is nested under /users/{userId} for easy ownership checks.
 * - Focus tips are globally readable.
 *
 * Denormalization for Authorization:
 *   - User-owned documents (tasks, subtasks, schedule entries, reminders) all have a `userId` field
 *     that MUST match the `userId` in the path. This is enforced on `create` and update operations.
 *     This design avoids the need for costly `get()` calls to parent documents during authorization.
 *
 * Structural Segregation:
 *   - Focus tips are stored in a separate, top-level collection (/focusTips) to allow for public read access
 *     without compromising the security of user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document.
     * @allow (get) - Authenticated user can get their own user document.
     * @allow (update) - Authenticated user can update their own user document.
     * @allow (delete) - Authenticated user can delete their own user document.
     * @deny (list) - Prevents listing of all users.
     * @deny (create) - Unauthenticated user can't create any user document.
     * @deny (update) - Authenticated user can't update other user document.
     * @deny (delete) - Authenticated user can't delete other user document.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/tasks collection.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create task under their own user document.
     * @allow (get) - Authenticated user can get task under their own user document.
     * @allow (update) - Authenticated user can update task under their own user document.
     * @allow (delete) - Authenticated user can delete task under their own user document.
     * @allow (list) - Authenticated user can list tasks under their own user document.
     * @deny (create) - Unauthenticated user can't create any task document.
     * @deny (update) - Authenticated user can't update other user task document.
     * @deny (delete) - Authenticated user can't delete other user task document.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/tasks/{taskId}/subtasks collection.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - Authenticated user can create subtask under their own task document.
     * @allow (get) - Authenticated user can get subtask under their own task document.
     * @allow (update) - Authenticated user can update subtask under their own task document.
     * @allow (delete) - Authenticated user can delete subtask under their own task document.
     * @allow (list) - Authenticated user can list subtasks under their own task document.
     * @deny (create) - Unauthenticated user can't create any subtask document.
     * @deny (update) - Authenticated user can't update other user subtask document.
     * @deny (delete) - Authenticated user can't delete other user subtask document.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/tasks/$(taskId)).data.userId == userId;
      allow update: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/tasks/$(taskId)).data.userId == userId;
      allow delete: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/tasks/$(taskId)).data.userId == userId;
    }

    /**
     * @description Protects the /users/{userId}/scheduleEntries collection.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - Authenticated user can create scheduleEntries under their own user document.
     * @allow (get) - Authenticated user can get scheduleEntries under their own user document.
     * @allow (update) - Authenticated user can update scheduleEntries under their own user document.
     * @allow (delete) - Authenticated user can delete scheduleEntries under their own user document.
     * @allow (list) - Authenticated user can list scheduleEntries under their own user document.
     * @deny (create) - Unauthenticated user can't create any scheduleEntries document.
     * @deny (update) - Authenticated user can't update other user scheduleEntries document.
     * @deny (delete) - Authenticated user can't delete other user scheduleEntries document.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/reminders collection.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - Authenticated user can create reminders under their own user document.
     * @allow (get) - Authenticated user can get reminders under their own user document.
     * @allow (update) - Authenticated user can update reminders under their own user document.
     * @allow (delete) - Authenticated user can delete reminders under their own user document.
     * @allow (list) - Authenticated user can list reminders under their own user document.
     * @deny (create) - Unauthenticated user can't create any reminders document.
     * @deny (update) - Authenticated user can't update other user reminders document.
     * @deny (delete) - Authenticated user can't delete other user reminders document.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/reminders/{reminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Makes the /focusTips collection publicly readable, but only allows authenticated users to write.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) - Any user can read focus tips.
     * @allow (create, update, delete) - Only authenticated users can modify focus tips.
     * @deny (create, update, delete) - Unauthenticated user can't write to focus tips.
     * @principle Allows for public read access while restricting write access to authorized users.
     */
    match /focusTips/{focusTipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}