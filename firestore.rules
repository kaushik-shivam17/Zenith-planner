/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (tasks, subtasks, schedule entries, and reminders). Each user can only
 * access their own data. Focus tips are public.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks owned by a specific user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks for a task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders.
 * - /focusTips/{focusTipId}: Stores global focus tips.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Focus tips are publicly accessible.
 * - Listing of user documents is forbidden.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     * @principle Enforces document ownership for writes and prevents listing of user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to tasks for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task under their own profile.
     * @deny (create) User with ID 'user123' cannot create a task under user 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to subtasks for a specific task of a user.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) User with ID 'user123' can create a subtask under their own task.
     * @deny (create) User with ID 'user123' cannot create a subtask under user 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to schedule entries for a specific user.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) User with ID 'user123' can create a schedule entry under their own profile.
     * @deny (create) User with ID 'user123' cannot create a schedule entry under user 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to reminders for a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) User with ID 'user123' can create a reminder under their own profile.
     * @deny (create) User with ID 'user123' cannot create a reminder under user 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to global focus tips.
     * @path /focusTips/{focusTipId}
     * @allow (get) Any user can read focus tips.
     * @deny (create) No one can create focus tips (requires admin privileges - TODO).
     * @principle Allows public read access, restricts writes.
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false; // TODO: Add admin role check
    }
  }
}