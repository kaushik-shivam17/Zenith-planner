/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (tasks, subtasks, schedule entries, and reminders). Focus tips are globally
 * readable but not writable by users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks owned by a specific user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks belonging to a specific task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries for a specific user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a specific user.
 * - /focusTips/{focusTipId}: Stores global focus tips, accessible to all users.
 *
 * Key Security Decisions:
 * - User data is secured via path-based ownership. Only the authenticated user
 *   matching the {userId} path segment can read or write to their own data.
 * - Focus tips are publicly readable to encourage widespread access. However,
 *   write access is not granted to users in this prototype.
 * - Listing of user-owned data (tasks, schedule entries, reminders) is allowed
 *   only for the owner.
 * - No schema validation is performed in this prototype to allow for rapid
 *   iteration. However, ownership on create and immutability of owner fields
 *   are enforced to maintain security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return request.auth.uid == resource.data.userId;
    }

    /******************* User *******************/

    /**
     * @description Allows access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @deny (create) - User tries to create a profile for another user.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (get, list, update, delete) - User tries to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is disallowed for privacy.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /******************* Task *******************/

    /**
     * @description Allows access to tasks based on ownership.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user creates a task under their user ID.
     * @deny (create) - User tries to create a task under another user's ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own tasks.
     * @deny (get, list, update, delete) - User tries to access another user's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /******************* Subtask *******************/

    /**
     * @description Allows access to subtasks based on ownership.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - Authenticated user creates a subtask under their task.
     * @deny (create) - User tries to create a subtask under another user/task.
     * @allow (get, list, update, delete) - Authenticated user accesses their own subtasks.
     * @deny (get, list, update, delete) - User tries to access another user's subtasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /******************* ScheduleEntry *******************/

    /**
     * @description Allows access to schedule entries based on ownership.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - Authenticated user creates a schedule entry under their user ID.
     * @deny (create) - User tries to create a schedule entry under another user's ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own schedule entries.
     * @deny (get, list, update, delete) - User tries to access another user's schedule entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /******************* Reminder *******************/

    /**
     * @description Allows access to reminders based on ownership.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - Authenticated user creates a reminder under their user ID.
     * @deny (create) - User tries to create a reminder under another user's ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own reminders.
     * @deny (get, list, update, delete) - User tries to access another user's reminders.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /******************* FocusTip *******************/

    /**
     * @description Allows public read access to focus tips. Write access is denied to all users.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) - Any user can read focus tips.
     * @deny (create, update, delete) - No user can create, update, or delete focus tips.
     * @principle Provides public read access while restricting write access.
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}