/**
 * @file Firestore Security Rules for Zenith Planner
 * @core_philosophy This ruleset enforces a strict user-ownership model.  Users can only
 *                access their own data, and data cannot be created, modified, or deleted
 *                unless the user is the owner.
 * @data_structure All data is nested under /users/{userId}, with subcollections for
 *                 bmiHistory, tasks, and missions.  This structure ensures that all
 *                 data is scoped to a specific user.
 * @key_security_decisions
 *   - User listing is disallowed to protect user privacy.
 *   - All write operations require the user to be authenticated.
 *   - No schema validation is performed beyond checking ownership.
 *   - Update operations must validate that ownership cannot be changed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the user is not authenticated or the userId does not match the authenticated user ID.
     * @deny (get, update, delete) - If the user is not authenticated or the userId does not match the authenticated user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to BMI history documents for a specific user.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) - Authenticated user can create their own BMI records.
     * @allow (get, list, update, delete) - Authenticated user can only access their own BMI records.
     * @deny (create) - If the user is not authenticated or the userId does not match the authenticated user ID.
     * @deny (get, list, update, delete) - If the user is not authenticated or the userId does not match the authenticated user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create their own tasks.
     * @allow (get, list, update, delete) - Authenticated user can only access their own tasks.
     * @deny (create) - If the user is not authenticated or the userId does not match the authenticated user ID.
     * @deny (get, list, update, delete) - If the user is not authenticated or the userId does not match the authenticated user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Controls access to mission documents for a specific user.
      * @path /users/{userId}/missions/{missionId}
      * @allow (create) - Authenticated user can create their own missions.
      * @allow (get, list, update, delete) - Authenticated user can only access their own missions.
      * @deny (create) - If the user is not authenticated or the userId does not match the authenticated user ID.
      * @deny (get, list, update, delete) - If the user is not authenticated or the userId does not match the authenticated user ID.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/missions/{missionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }
  }
}