/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for all
 * personal data (tasks, subtasks, schedule entries, reminders). Only the
 * authenticated user who owns the data can read or write it. Focus tips are
 * publicly accessible.
 *
 * Data Structure: User data is nested under /users/{userId}, with further
 * subcollections for tasks, subtasks, schedule entries, and reminders. Focus
 * tips are stored in the top-level /focusTips collection.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Data validation is limited to ensuring ownership and relational integrity.
 *
 * Denormalization for Authorization: The `userId` is included in task,
 * schedule entry, and reminder documents, enabling simple `isOwner()` checks.
 *
 * Structural Segregation: Private user data is stored under the /users/{userId}
 * path, while public focus tips are stored in the top-level /focusTips
 * collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user ID matches the request's auth UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user ID matches the request's auth UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data.id);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *    request.auth.uid == 'user123'
     * @allow (get) - User with ID 'user123' can read their own profile.
     *    request.auth.uid == 'user123'
     * @allow (update) - User with ID 'user123' can update their own profile.
     *    request.auth.uid == 'user123'
     * @allow (delete) - User with ID 'user123' can delete their own profile.
     *    request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *    request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for tasks under a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with ID 'user123' can create a task under their profile.
     *    request.auth.uid == 'user123'
     * @allow (get) - User with ID 'user123' can read a task under their profile.
     *    request.auth.uid == 'user123'
     * @allow (update) - User with ID 'user123' can update a task under their profile.
     *    request.auth.uid == 'user123'
     * @allow (delete) - User with ID 'user123' can delete a task under their profile.
     *    request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a task under user 'user123'.
     *    request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for subtasks under a task.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - User with ID 'user123' can create a subtask under their task.
     *    request.auth.uid == 'user123'
     * @allow (get) - User with ID 'user123' can read a subtask under their task.
     *    request.auth.uid == 'user123'
     * @allow (update) - User with ID 'user123' can update a subtask under their task.
     *    request.auth.uid == 'user123'
     * @allow (delete) - User with ID 'user123' can delete a subtask under their task.
     *    request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a subtask under user 'user123'.
     *    request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for schedule entries under a user.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - User with ID 'user123' can create a schedule entry under their profile.
     *    request.auth.uid == 'user123'
     * @allow (get) - User with ID 'user123' can read a schedule entry under their profile.
     *    request.auth.uid == 'user123'
     * @allow (update) - User with ID 'user123' can update a schedule entry under their profile.
     *    request.auth.uid == 'user123'
     * @allow (delete) - User with ID 'user123' can delete a schedule entry under their profile.
     *    request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a schedule entry under user 'user123'.
     *    request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for reminders under a user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - User with ID 'user123' can create a reminder under their profile.
     *    request.auth.uid == 'user123'
     * @allow (get) - User with ID 'user123' can read a reminder under their profile.
     *    request.auth.uid == 'user123'
     * @allow (update) - User with ID 'user123' can update a reminder under their profile.
     *    request.auth.uid == 'user123'
     * @allow (delete) - User with ID 'user123' can delete a reminder under their profile.
     *    request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a reminder under user 'user123'.
     *    request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for focus tips, which are publicly accessible.
     * @path /focusTips/{focusTipId}
     * @allow (get) - Any user can read a focus tip.
     * @allow (list) - Any user can list focus tips.
     * @deny (create) - No one can create a focus tip.
     * @deny (update) - No one can update a focus tip.
     * @deny (delete) - No one can delete a focus tip.
     * @principle Public read access with no write access.
     */
    match /focusTips/{focusTipId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}