/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * access data associated with their own user ID.
 *
 * Data Structure:
 * The database is structured with a top-level `/users/{userId}` collection,
 * where each document contains a user's profile information.  Subcollections
 * under each user document (e.g., `/users/{userId}/bmiHistory/{bmiId}`) store
 * data specific to that user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing all users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * The `userId` is included within documents in subcollections to simplify
 * ownership checks.  This avoids the need for complex queries in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if userId matches their UID.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for userId 'user123'.
     * @deny (list) - Listing all users is not allowed.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete profile for userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to BMI history data for a specific user.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) - User with UID 'user123' can create a BMI record under their profile.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their own BMI records.
     * @deny (create) - User with UID 'user456' cannot create a BMI record for userId 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, list, update or delete BMI records for userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Controls access to task data for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'user123' can create a task under their profile.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their own tasks.
     * @deny (create) - User with UID 'user456' cannot create a task for userId 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, list, update or delete tasks for userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Controls access to mission data for a specific user.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) - User with UID 'user123' can create a mission under their profile.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their own missions.
     * @deny (create) - User with UID 'user456' cannot create a mission for userId 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, list, update or delete missions for userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/missions/{missionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}