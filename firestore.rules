/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree under `/users/{userId}`,
 * and they can only access data within their own tree.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The {userId} must match the authenticated user's UID.
 * - /users/{userId}/bmiHistory/{bmiId}: Stores historical BMI data for the user.
 * - /users/{userId}/tasks/{taskId}: Stores individual tasks for the user.
 * - /users/{userId}/missions/{missionId}: Stores long-term missions/goals for the user.
 *
 * Key Security Decisions:
 * - No global admin roles are defined.
 * - Users cannot list other users' data.
 * - Data validation is limited to checking ownership and relational integrity (userId matching).
 *
 * Denormalization for Authorization:
 * - The `userId` field within documents under `/users/{userId}` subcollections is used to ensure that the document belongs to the user specified in the path. This avoids costly `get()` operations in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get, update, delete) User with UID 'user123' can access their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot access user 'user123' profile.
     * @principle Enforces document ownership; users can only access their own profile data.
     */
    match /users/{userId} {
      // isSignedIn() checks if the user is authenticated
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing all users
      allow create: if isSignedIn() && isOwner(userId); // User can create their own profile.
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's BMI history.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) User with UID 'user123' can create a BMI record in their history.
     * @allow (get, list, update, delete) User with UID 'user123' can access their BMI history.
     * @deny (create) User with UID 'user456' cannot create a BMI record for user 'user123'.
     * @deny (get, list, update, delete) User with UID 'user456' cannot access user 'user123' BMI history.
     * @principle Enforces document ownership; users can only access their own BMI records.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'user123' can create a task.
     * @allow (get, list, update, delete) User with UID 'user123' can access their tasks.
     * @deny (create) User with UID 'user456' cannot create a task for user 'user123'.
     * @deny (get, list, update, delete) User with UID 'user456' cannot access user 'user123' tasks.
     * @principle Enforces document ownership; users can only access their own tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's missions.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) User with UID 'user123' can create a mission.
     * @allow (get, list, update, delete) User with UID 'user123' can access their missions.
     * @deny (create) User with UID 'user456' cannot create a mission for user 'user123'.
     * @deny (get, list, update, delete) User with UID 'user456' cannot access user 'user123' missions.
     * @principle Enforces document ownership; users can only access their own missions.
     */
    match /users/{userId}/missions/{missionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}