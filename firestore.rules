/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user-specific data
 * and provides public read access for global focus tips.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks associated with a specific user.
 * - /users/{userId}/timetableEvents/{timetableEventId}: Stores timetable events for a specific user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a specific user.
 * - /focus_tips/{focusTipId}: Stores global focus tips.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} collection and its subcollections.
 * - Public read access is granted to the /focus_tips collection.
 * - Listing of user subcollections (tasks, timetableEvents, reminders) is allowed only for the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with UID 'user123' can read, create, update, and delete their own profile at /users/user123.
     * @deny (get, create, update, delete) - User with UID 'user456' cannot read, create, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can read and write their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (get, list, create, update, delete) - User with UID 'user123' can read, list, create, update, and delete their own tasks under /users/user123/tasks.
     * @deny (get, list, create, update, delete) - User with UID 'user456' cannot read, list, create, update, or delete tasks under /users/user123/tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can read and write their own timetable events.
     * @path /users/{userId}/timetableEvents/{timetableEventId}
     * @allow (get, list, create, update, delete) - User with UID 'user123' can read, list, create, update, and delete their own timetable events under /users/user123/timetableEvents.
     * @deny (get, list, create, update, delete) - User with UID 'user456' cannot read, list, create, update, or delete timetable events under /users/user123/timetableEvents.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/timetableEvents/{timetableEventId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can read and write their own reminders.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (get, list, create, update, delete) - User with UID 'user123' can read, list, create, update, and delete their own reminders under /users/user123/reminders.
     * @deny (get, list, create, update, delete) - User with UID 'user456' cannot read, list, create, update, or delete reminders under /users/user123/reminders.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to focus tips.
     * @path /focus_tips/{focusTipId}
     * @allow (get, list) - Any user can read focus tips.
     * @deny (create, update, delete) - Only admin users can create, update, or delete focus tips.
     * @principle Provides public read access with restricted write access.
     */
    match /focus_tips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}