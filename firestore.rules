/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access data associated with their own user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/bmiHistory/{bmiId}: Stores BMI history for each user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user.
 * - /users/{userId}/missions/{missionId}: Stores missions for each user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data. Listing other users is prohibited.
 * - Data consistency between the path and document fields is enforced for user-owned data.
 *
 * Denormalization for Authorization:
 * - The `userId` field within documents stored under `/users/{userId}` is used for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's BMI history records.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) - User with UID 'user123' can create a BMI record at /users/user123/bmiHistory/bmi1.
     * @allow (get) - User with UID 'user123' can read their BMI record at /users/user123/bmiHistory/bmi1.
     * @allow (update) - User with UID 'user123' can update their BMI record at /users/user123/bmiHistory/bmi1.
     * @allow (delete) - User with UID 'user123' can delete their BMI record at /users/user123/bmiHistory/bmi1.
     * @deny (create) - User with UID 'user456' cannot create a BMI record at /users/user123/bmiHistory/bmi1.
     * @deny (get) - User with UID 'user456' cannot read the BMI record at /users/user123/bmiHistory/bmi1.
     * @deny (update) - User with UID 'user456' cannot update the BMI record at /users/user123/bmiHistory/bmi1.
     * @deny (delete) - User with UID 'user456' cannot delete the BMI record at /users/user123/bmiHistory/bmi1.
     * @principle Restricts access to a user's own BMI data.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'user123' can create a task at /users/user123/tasks/task1.
     * @allow (get) - User with UID 'user123' can read their task at /users/user123/tasks/task1.
     * @allow (update) - User with UID 'user123' can update their task at /users/user123/tasks/task1.
     * @allow (delete) - User with UID 'user123' can delete their task at /users/user123/tasks/task1.
     * @deny (create) - User with UID 'user456' cannot create a task at /users/user123/tasks/task1.
     * @deny (get) - User with UID 'user456' cannot read the task at /users/user123/tasks/task1.
     * @deny (update) - User with UID 'user456' cannot update the task at /users/user123/tasks/task1.
     * @deny (delete) - User with UID 'user456' cannot delete the task at /users/user123/tasks/task1.
     * @principle Restricts access to a user's own tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

       /**
     * @description Controls access to a user's missions.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) - User with UID 'user123' can create a mission at /users/user123/missions/mission1.
     * @allow (get) - User with UID 'user123' can read their mission at /users/user123/missions/mission1.
     * @allow (update) - User with UID 'user123' can update their mission at /users/user123/missions/mission1.
     * @allow (delete) - User with UID 'user123' can delete their mission at /users/user123/missions/mission1.
     * @deny (create) - User with UID 'user456' cannot create a mission at /users/user123/missions/mission1.
     * @deny (get) - User with UID 'user456' cannot read the mission at /users/user123/missions/mission1.
     * @deny (update) - User with UID 'user456' cannot update the mission at /users/user123/missions/mission1.
     * @deny (delete) - User with UID 'user456' cannot delete the mission at /users/user123/missions/mission1.
     * @principle Restricts access to a user's own missions.
     */
    match /users/{userId}/missions/{missionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}