/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * create, read, update, and delete data associated with their own user ID.
 *
 * Data Structure:
 * The database is organized hierarchically under the `/users/{userId}` path.
 * User profiles, BMI history, tasks, and missions are all nested under
 * the user's document.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are restricted to the owner of the data.
 * - The rules prioritize authorization and do not validate data schemas
 *   beyond essential ownership checks.
 *
 * Denormalization for Authorization:
 * The `userId` field is present in all subcollection documents to avoid
 * needing to perform costly `get()` operations to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the root of the database. No direct access allowed.
     * @path /
     * @allow (get, list) if false
     * @deny (create, update, delete) always
     * @principle Root access is denied to prevent accidental data manipulation.
     */
    match /{document=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @allow (get) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (list) always
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces user ownership, ensuring only the authenticated user can manage their profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to BMI history documents for a specific user.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) if isOwner(userId) && request.resource.data.userId == userId
     * @allow (get, list) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create) if request.resource.data.userId != userId
     * @principle Enforces user ownership of BMI data.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) if isOwner(userId) && request.resource.data.userId == userId
     * @allow (get, list) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create) if request.resource.data.userId != userId
     * @principle Enforces user ownership of tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mission documents for a specific user.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) if isOwner(userId) && request.resource.data.userId == userId
     * @allow (get, list) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create) if request.resource.data.userId != userId
     * @principle Enforces user ownership of missions.
     */
    match /users/{userId}/missions/{missionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}