/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for personal data and allows public read access to global focus tips.
 *
 * Data Structure:
 * - All user-specific data (tasks, subtasks, schedule entries, reminders) is nested under `/users/{userId}`.
 * - Focus tips are stored in the top-level `/focusTips` collection and are publicly readable.
 *
 * Key Security Decisions:
 * - User data is only accessible by the owning user.
 * - Focus tips are globally readable but not writable by users.
 * - List operations are generally allowed for user-owned subcollections, enabling clients to display data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user creates a task under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own tasks.
     * @deny (create) - Authenticated user attempts to create a task under a different user ID.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subtasks for a specific task.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - Authenticated user creates a subtask under their own task.
     * @allow (get, list, update, delete) - Authenticated user accesses their own subtasks.
     * @deny (create) - Authenticated user attempts to create a subtask under a task they don't own.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's subtasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to schedule entries for a specific user.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - Authenticated user creates a schedule entry under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own schedule entries.
     * @deny (create) - Authenticated user attempts to create a schedule entry under a different user ID.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's schedule entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to reminders for a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - Authenticated user creates a reminder under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own reminders.
     * @deny (create) - Authenticated user attempts to create a reminder under a different user ID.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's reminders.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to global focus tips.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) - All users can read focus tips.
     * @deny (create, update, delete) - No users can modify focus tips.
     * @principle Allows public read access and restricts write access.
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the requesting user is the existing owner of the document.
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}