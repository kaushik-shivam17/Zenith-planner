rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID matching {userId} can create their profile.
     * @allow (get, update, delete) - User with UID matching {userId} can read, update, and delete their profile.
     * @deny (list) - Listing all users is not permitted.
     * @deny (create) - User with UID not matching {userId} cannot create a profile for another user.
     * @deny (update, delete) - User with UID not matching {userId} cannot modify or delete another user's profile.
     * @principle Enforces user-ownership: Only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects BMI history records for a user.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) - User with UID matching {userId} can create a new BMI record in their history.
     * @allow (get, list, update, delete) - User with UID matching {userId} can read, list, update, and delete their own BMI records.
     * @deny (create) - User with UID not matching {userId} cannot create a BMI record for another user.
     * @deny (update, delete) - User with UID not matching {userId} cannot modify or delete another user's BMI records.
     * @principle Enforces user-ownership: Only the authenticated user can manage their own BMI records.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects tasks for a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID matching {userId} can create a new task.
     * @allow (get, list, update, delete) - User with UID matching {userId} can read, list, update, and delete their own tasks.
     * @deny (create) - User with UID not matching {userId} cannot create a task for another user.
     * @deny (update, delete) - User with UID not matching {userId} cannot modify or delete another user's tasks.
     * @principle Enforces user-ownership: Only the authenticated user can manage their own tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}