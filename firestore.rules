/**
 * @file Firebase Security Rules for Zenith Planner.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data
 *  (tasks, timetable events, reminders) stored under each user's profile. Global focus tips are publicly readable.
 * @data_structure Data is organized hierarchically: /users/{userId} contains user profiles,
 *  and each user has subcollections for their tasks, timetable events, and reminders.
 *  Focus tips are stored in a top-level collection /focus_tips.
 * @key_security_decisions
 *  - Users can only access their own data (profiles, tasks, timetable events, reminders).
 *  - Focus tips are publicly readable but not writable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to manage their own user profile.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for profile access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for task creation.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage their own timetable events.
     * @path /users/{userId}/timetableEvents/{timetableEventId}
     * @allow (create) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for timetable event creation.
     */
    match /users/{userId}/timetableEvents/{timetableEventId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage their own reminders.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for reminder creation.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to focus tips. Write access is denied.
     * @path /focus_tips/{focusTipId}
     * @allow (read, list) if true
     * @deny (create, update, delete) always
     * @principle Provides global, read-only access to focus tips.
     */
    match /focus_tips/{focusTipId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}