/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  All data is nested under /users/{userId},
 * and each user can only access their own data. No listing of users is allowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/bmiHistory/{bmiId}: Stores historical BMI data for each user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user.
 * - /users/{userId}/missions/{missionId}: Stores missions for each user.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information leakage.
 * - All write operations are validated against the authenticated user's ID to prevent data tampering.
 *
 * Denormalization for Authorization:
 *  The rules rely on the path (e.g., /users/{userId}) to enforce ownership.  There's no need to
 *  duplicate the userId inside the documents themselves.  The `isOwner(userId)` function checks
 *  if the requested userId matches the authenticated user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access restrictions.  No direct access to the root is permitted.
     * @path /
     * @allow (get, list) false - No direct reads allowed.
     * @deny (create, update, delete) Always deny root writes.
     * @principle Prevents accidental or malicious modification of the database root.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get) Signed-in user can get their own profile.
     * @allow (create) Signed-in user can create their own profile (self-registration).
     * @allow (update, delete) Signed-in user can update/delete their own profile.
     * @deny (list) Listing users is prohibited.
     * @deny (create) Cannot create a user document for a different user.
     * @deny (update, delete) Cannot modify a user document for a different user.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's BMI history.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (get, list) Signed-in user can read their own BMI history.
     * @allow (create) Signed-in user can create BMI records for themselves.
     * @allow (update, delete) Signed-in user can modify their own BMI records.
     * @deny (create) Cannot create a BMI record for a different user.
     * @deny (update, delete) Cannot modify a BMI record for a different user.
     * @principle Enforces user-ownership for BMI history data.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (get, list) Signed-in user can read their own tasks.
     * @allow (create) Signed-in user can create tasks for themselves.
     * @allow (update, delete) Signed-in user can modify their own tasks.
     * @deny (create) Cannot create a task for a different user.
     * @deny (update, delete) Cannot modify a task for a different user.
     * @principle Enforces user-ownership for task data.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's missions.
     * @path /users/{userId}/missions/{missionId}
     * @allow (get, list) Signed-in user can read their own missions.
     * @allow (create) Signed-in user can create missions for themselves.
     * @allow (update, delete) Signed-in user can modify their own missions.
     * @deny (create) Cannot create a mission for a different user.
     * @deny (update, delete) Cannot modify a mission for a different user.
     * @principle Enforces user-ownership for mission data.
     */
    match /users/{userId}/missions/{missionId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId The user ID from the path.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId The user ID from the path.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}