/**
 * @file Firestore Security Rules for Zenith Planner
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has exclusive access to their own data,
 * including profile information, BMI history, tasks, missions, and goals.
 *
 * @Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership.  Subcollections organize specific
 * data types (bmiHistory, tasks, missions).  Goals are further nested under missions.
 *
 * @Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing other users' data is disallowed.
 * - Schema validation is relaxed for rapid prototyping but critical relational fields are validated.
 *
 * @Denormalization for Authorization:
 *  - User IDs are embedded within documents to simplify ownership checks, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) User with matching UID can create, update, or delete their own profile.
     * @allow (get) User with matching UID can read their profile.
     * @deny (create, update, delete) User with mismatched UID cannot create, update, or delete this profile.
     * @deny (get) User with mismatched UID cannot read this profile.
     * @principle Enforces document ownership for all operations.  Validates relational integrity on create and update.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own BMI history records.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create, update, delete) User with matching UID can create, update, or delete their own BMI records.
     * @allow (get, list) User with matching UID can read and list their own BMI records.
     * @deny (create, update, delete) User with mismatched UID cannot create, update, or delete this BMI record.
     * @deny (get, list) User with mismatched UID cannot read or list these BMI records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, update, delete) User with matching UID can create, update, or delete their own tasks.
     * @allow (get, list) User with matching UID can read and list their own tasks.
     * @deny (create, update, delete) User with mismatched UID cannot create, update, or delete this task.
     * @deny (get, list) User with mismatched UID cannot read or list these tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows users to read and write their own missions.
      * @path /users/{userId}/missions/{missionId}
      * @allow (create, update, delete) User with matching UID can create, update, or delete their own missions.
      * @allow (get, list) User with matching UID can read and list their own missions.
      * @deny (create, update, delete) User with mismatched UID cannot create, update, or delete this mission.
      * @deny (get, list) User with mismatched UID cannot read or list these missions.
      * @principle Enforces document ownership for all operations.
      */
    match /users/{userId}/missions/{missionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own goals within their missions.
     * @path /users/{userId}/missions/{missionId}/goals/{goalId}
     * @allow (create, update, delete) User with matching UID can create, update, or delete their own goals.
     * @allow (get, list) User with matching UID can read and list their own goals.
     * @deny (create, update, delete) User with mismatched UID cannot create, update, or delete this goal.
     * @deny (get, list) User with mismatched UID cannot read or list these goals.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/missions/{missionId}/goals/{goalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }
  }
}