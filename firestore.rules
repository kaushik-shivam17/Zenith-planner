/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all user-related data
 * (tasks, subtasks, schedule entries, reminders). Only the authenticated user
 * who owns the data can read or write it. Global focus tips are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks owned by a user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks of a task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders.
 * - /focusTips/{focusTipId}: Stores global focus tips, publicly readable.
 *
 * Key Security Decisions:
 * - No user listing: Listing all users is disallowed for privacy.
 * - Focus tips are publicly readable.
 * - Strict ownership: All data under a user's path is owned by that user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a profile with ID 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *     request.auth.uid == 'user123'
     * @deny (get) User with ID 'user456' tries to read profile with ID 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *     request.auth.uid == 'user123'
     * @deny (update) User with ID 'user456' tries to update profile with ID 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *     request.auth.uid == 'user123'
     * @deny (delete) User with ID 'user456' tries to delete profile with ID 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task under their profile.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a task under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (get) User with ID 'user123' can read a task under their profile.
     *     request.auth.uid == 'user123'
     * @deny (get) User with ID 'user456' tries to read a task under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (update) User with ID 'user123' can update a task under their profile.
     *     request.auth.uid == 'user123'
     * @deny (update) User with ID 'user456' tries to update a task under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (delete) User with ID 'user123' can delete a task under their profile.
     *     request.auth.uid == 'user123'
     * @deny (delete) User with ID 'user456' tries to delete a task under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for subtasks.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) User with ID 'user123' can create a subtask under their task.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a subtask under task of 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (get) User with ID 'user123' can read a subtask under their task.
     *     request.auth.uid == 'user123'
     * @deny (get) User with ID 'user456' tries to read a subtask under task of 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (update) User with ID 'user123' can update a subtask under their task.
     *     request.auth.uid == 'user123'
     * @deny (update) User with ID 'user456' tries to update a subtask under task of 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (delete) User with ID 'user123' can delete a subtask under their task.
     *     request.auth.uid == 'user123'
     * @deny (delete) User with ID 'user456' tries to delete a subtask under task of 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for schedule entries.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) User with ID 'user123' can create a schedule entry under their profile.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a schedule entry under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (get) User with ID 'user123' can read a schedule entry under their profile.
     *     request.auth.uid == 'user123'
     * @deny (get) User with ID 'user456' tries to read a schedule entry under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (update) User with ID 'user123' can update a schedule entry under their profile.
     *     request.auth.uid == 'user123'
     * @deny (update) User with ID 'user456' tries to update a schedule entry under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (delete) User with ID 'user123' can delete a schedule entry under their profile.
     *     request.auth.uid == 'user123'
     * @deny (delete) User with ID 'user456' tries to delete a schedule entry under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for reminders.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) User with ID 'user123' can create a reminder under their profile.
     *     request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a reminder under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (get) User with ID 'user123' can read a reminder under their profile.
     *     request.auth.uid == 'user123'
     * @deny (get) User with ID 'user456' tries to read a reminder under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (update) User with ID 'user123' can update a reminder under their profile.
     *     request.auth.uid == 'user123'
     * @deny (update) User with ID 'user456' tries to update a reminder under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @allow (delete) User with ID 'user123' can delete a reminder under their profile.
     *     request.auth.uid == 'user123'
     * @deny (delete) User with ID 'user456' tries to delete a reminder under profile 'user123'.
     *     request.auth.uid == 'user456', userId == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for focus tips.
     * @path /focusTips/{focusTipId}
     * @allow (get) Any user can read a focus tip.
     *     request.auth != null
     * @deny (create) No one can create focus tips through client.
     *     request.auth != null
     * @deny (update) No one can update focus tips through client.
     *     request.auth != null
     * @deny (delete) No one can delete focus tips through client.
     *     request.auth != null
     * @principle Allows public read access but restricts all write access.
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}