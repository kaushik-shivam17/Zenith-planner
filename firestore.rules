/**
 * @file Zenith Planner Firestore Security Rules
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a strict user-ownership model for most data, with publicly readable focus tips.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Tasks owned by the user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Subtasks owned by the user.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Schedule entries owned by the user.
 * - /users/{userId}/reminders/{reminderId}: Reminders owned by the user.
 * - /focusTips/{focusTipId}: Publicly accessible focus tips.
 *
 * Key Security Decisions:
 * - User data and associated subcollections (tasks, subtasks, schedule entries, reminders) are strictly controlled by the owning user.
 * - Focus tips are publicly readable.
 * - List operations are generally allowed for owners of user subcollections.
 *
 * Denormalization for Authorization:
 *  - User ownership is determined by the document path, eliminating the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to tasks owned by a specific user.
     * @path /users/{userId}/tasks/{taskId}
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to subtasks belonging to a specific task of a specific user.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to schedule entries for a specific user.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to reminders for a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     */
    match /users/{userId}/reminders/{reminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
     * @description Controls access to timetable events for a specific user.  This addresses the original error.
     * @path /users/{userId}/timetableEvents/{eventId}
     */
    match /users/{userId}/timetableEvents/{eventId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to focus tips.
     * @path /focusTips/{focusTipId}
     */
    match /focusTips/{focusTipId} {
      allow get: if true;
      allow list: if true;
    }
  }
}