/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the Zenith Planner application.
 *
 * Data Structure:
 * - All data is nested under /users/{userId}, ensuring that each user's data is isolated.
 * - The /users/{userId} document stores the user's profile information.
 * - Subcollections under /users/{userId} store user-specific data like BMI history, tasks, and missions.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users is disallowed.
 * - All write operations are validated against the authenticated user's ID.
 *
 * Denormalization for Authorization:
 * - The 'userId' field in subcollection documents (BMI, Task, Mission) is used for authorization. This avoids costly `get()` calls to the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the requested userId matches the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Function to check if the user is signed in and owns the resource
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      // Allow the user to create their own user document if the userId matches their auth uid
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to update their own user document
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own user document
      allow delete: if isExistingOwner(userId);

      /**
       * @description Secure BMI history data for a user. Only the authenticated user can read or write their own BMI records.
       * @path /users/{userId}/bmiHistory/{bmiId}
       * @allow (get, create, update, delete) if the user is signed in and the requested userId matches the authenticated user's UID.
       * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's UID.
       * @principle Enforces document ownership for all operations on BMI records.
       */
      match /users/{userId}/bmiHistory/{bmiId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }

       /**
        * @description Secure task data for a user. Only the authenticated user can read or write their own tasks.
        * @path /users/{userId}/tasks/{taskId}
        * @allow (get, create, update, delete) if the user is signed in and the requested userId matches the authenticated user's UID.
        * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's UID.
        * @principle Enforces document ownership for all operations on tasks.
        */
      match /users/{userId}/tasks/{taskId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Secure mission data for a user. Only the authenticated user can read or write their own missions.
       * @path /users/{userId}/missions/{missionId}
       * @allow (get, create, update, delete) if the user is signed in and the requested userId matches the authenticated user's UID.
       * @deny (get, create, update, delete) if the user is not signed in or the userId does not match the authenticated user's UID.
       * @principle Enforces document ownership for all operations on missions.
       */
      match /users/{userId}/missions/{missionId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}