rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can get, update or delete their profile if authenticated as 'user123'.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot create, get, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure tasks. Only the owner can manage their tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with ID 'user123' can create a task under their profile.
     * @allow (get, list, update, delete) - User with ID 'user123' can read, list, update, and delete tasks under their profile.
     * @deny (create, get, list, update, delete) - User with ID 'user456' cannot create, read, list, update, or delete tasks under user 'user123's profile.
     * @principle Enforces strict user-ownership for all task-related operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure subtasks. Only the owner of the parent task can manage its subtasks.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - User with ID 'user123' can create a subtask under their task.
     * @allow (get, list, update, delete) - User with ID 'user123' can read, list, update, and delete subtasks under their task.
     * @deny (create, get, list, update, delete) - User with ID 'user456' cannot create, read, list, update, or delete subtasks under user 'user123's task.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure schedule entries. Only the owner can manage their schedule entries.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - User with ID 'user123' can create a schedule entry under their profile.
     * @allow (get, list, update, delete) - User with ID 'user123' can read, list, update, and delete schedule entries under their profile.
     * @deny (create, get, list, update, delete) - User with ID 'user456' cannot create, read, list, update, or delete schedule entries under user 'user123's profile.
     * @principle Enforces user-ownership for all schedule entry-related operations.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure reminders. Only the owner can manage their reminders.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - User with ID 'user123' can create a reminder under their profile.
     * @allow (get, list, update, delete) - User with ID 'user123' can read, list, update, and delete reminders under their profile.
     * @deny (create, get, list, update, delete) - User with ID 'user456' cannot create, read, list, update, or delete reminders under user 'user123's profile.
     * @principle Enforces user-ownership for all reminder-related operations.
     */
    match /users/{userId}/reminders/{reminderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allow public read access to focus tips. Any authenticated or unauthenticated user can read focus tips. Only administrators can create, update, and delete.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) - Any user can read focus tips.
     * @deny (create, update, delete) - Only administrators can create, update, or delete focus tips.
     * @principle Focus tips are publicly readable but only modifiable by admins (currently disabled).
     */
    match /focusTips/{focusTipId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add Admin role.
    }
  }
}