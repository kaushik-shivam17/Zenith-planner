/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user-specific data,
 * while allowing public read access to shared resources like focus tips.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/tasks/{taskId}: Stores tasks associated with a specific user. Only the user can read/write their own tasks.
 * - /users/{userId}/timetableEvents/{timetableEventId}: Stores timetable events for a specific user. Only the user can read/write their own timetable events.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a specific user. Only the user can read/write their own reminders.
 * - /focus_tips/{focusTipId}: Stores global focus tips. Public read access.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied via the rules structure.
 * - Focus tips are publicly readable.
 *
 * Denormalization for Authorization:
 *   - All user-owned documents contain the userId in the path, which simplifies ownership checks.
 *
 * Structural Segregation:
 *   - User-specific data is stored under the /users/{userId} path, ensuring private access.
 *   - Public data (focus tips) is stored in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to tasks for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task under their profile.
     * @allow (get) User with ID 'user123' can read a task under their profile.
     * @allow (update) User with ID 'user123' can update a task under their profile.
     * @allow (delete) User with ID 'user123' can delete a task under their profile.
     * @deny (create) User with ID 'user456' cannot create a task under user 'user123'.
     * @principle Restricts access to a user's own task data.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to timetable events for a specific user.
     * @path /users/{userId}/timetableEvents/{timetableEventId}
     * @allow (create) User with ID 'user123' can create a timetable event under their profile.
     * @allow (get) User with ID 'user123' can read a timetable event under their profile.
     * @allow (update) User with ID 'user123' can update a timetable event under their profile.
     * @allow (delete) User with ID 'user123' can delete a timetable event under their profile.
     * @deny (create) User with ID 'user456' cannot create a timetable event under user 'user123'.
     * @principle Restricts access to a user's own timetable event data.
     */
    match /users/{userId}/timetableEvents/{timetableEventId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to reminders for a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) User with ID 'user123' can create a reminder under their profile.
     * @allow (get) User with ID 'user123' can read a reminder under their profile.
     * @allow (update) User with ID 'user123' can update a reminder under their profile.
     * @allow (delete) User with ID 'user123' can delete a reminder under their profile.
     * @deny (create) User with ID 'user456' cannot create a reminder under user 'user123'.
     * @principle Restricts access to a user's own reminder data.
     */
    match /users/{userId}/reminders/{reminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to focus tips. Public read access.
     * @path /focus_tips/{focusTipId}
     * @allow (get) Any user can read focus tips.
     * @deny (create) No user can create focus tips.
     * @deny (update) No user can update focus tips.
     * @deny (delete) No user can delete focus tips.
     * @principle Allows public read access but restricts write access.
     */
    match /focus_tips/{focusTipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}