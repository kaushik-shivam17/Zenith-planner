rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'testUID' can create their own profile.
     * @deny (create) User with UID 'otherUID' cannot create a profile for 'testUID'.
     * @allow (get) User with UID 'testUID' can read their profile.
     * @deny (get) User with UID 'otherUID' cannot read the 'testUID' profile.
     * @allow (update) User with UID 'testUID' can update their profile.
     * @deny (update) User with UID 'otherUID' cannot update the 'testUID' profile.
     * @allow (delete) User with UID 'testUID' can delete their profile.
     * @deny (delete) User with UID 'otherUID' cannot delete the 'testUID' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to user's BMI history.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) User with UID 'testUID' can create a BMI record in their own history.
     * @deny (create) User with UID 'otherUID' cannot create a BMI record in 'testUID' history.
     * @allow (get) User with UID 'testUID' can read a BMI record from their history.
     * @deny (get) User with UID 'otherUID' cannot read a BMI record from the 'testUID' history.
     * @allow (update) User with UID 'testUID' can update a BMI record in their own history.
     * @deny (update) User with UID 'otherUID' cannot update a BMI record in the 'testUID' history.
     * @allow (delete) User with UID 'testUID' can delete a BMI record from their own history.
     * @deny (delete) User with UID 'otherUID' cannot delete a BMI record from the 'testUID' history.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to user's tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'testUID' can create a task in their own tasks collection.
     * @deny (create) User with UID 'otherUID' cannot create a task in 'testUID' tasks collection.
     * @allow (get) User with UID 'testUID' can read a task from their tasks collection.
     * @deny (get) User with UID 'otherUID' cannot read a task from the 'testUID' tasks collection.
     * @allow (update) User with UID 'testUID' can update a task in their own tasks collection.
     * @deny (update) User with UID 'otherUID' cannot update a task in the 'testUID' tasks collection.
     * @allow (delete) User with UID 'testUID' can delete a task from their own tasks collection.
     * @deny (delete) User with UID 'otherUID' cannot delete a task from the 'testUID' tasks collection.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to user's missions.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) User with UID 'testUID' can create a mission in their own missions collection.
     * @deny (create) User with UID 'otherUID' cannot create a mission in 'testUID' missions collection.
     * @allow (get) User with UID 'testUID' can read a mission from their missions collection.
     * @deny (get) User with UID 'otherUID' cannot read a mission from the 'testUID' missions collection.
     * @allow (update) User with UID 'testUID' can update a mission in their own missions collection.
     * @deny (update) User with UID 'otherUID' cannot update a mission in the 'testUID' missions collection.
     * @allow (delete) User with UID 'testUID' can delete a mission from their own missions collection.
     * @deny (delete) User with UID 'otherUID' cannot delete a mission from the 'testUID' missions collection.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/missions/{missionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}