/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only
 * access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing of users is not allowed.
 *
 * Denormalization for Authorization:
 *  - The 'userId' field within each document is used to enforce
 *    ownership. This avoids the need for complex queries or additional
 *    reads to verify ownership.
 *
 * Structural Segregation:
 *  - All user-specific data (BMI, Tasks, Missions) are stored in
 *    user-specific subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the user profiles.  Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth UID can create their profile.
     * @allow (get, update, delete) User with ID matching auth UID can get, update and delete their profile.
     * @deny (create) User with ID not matching auth UID cannot create a profile.
     * @deny (get, update, delete) User with ID not matching auth UID cannot get, update and delete profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the BMI history data for each user. Users can only read/write their own BMI records.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) User with ID matching path's userId can create a BMI record.
     * @allow (get, update, delete) User with ID matching path's userId can get, update and delete BMI record.
     * @deny (create) User with ID not matching path's userId cannot create a BMI record.
     * @deny (get, update, delete) User with ID not matching path's userId cannot get, update and delete BMI record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Protects the tasks data for each user. Users can only read/write their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID matching path's userId can create a task.
     * @allow (get, update, delete) User with ID matching path's userId can get, update and delete task.
     * @deny (create) User with ID not matching path's userId cannot create a task.
     * @deny (get, update, delete) User with ID not matching path's userId cannot get, update and delete task.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Protects the missions data for each user. Users can only read/write their own missions.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) User with ID matching path's userId can create a mission.
     * @allow (get, update, delete) User with ID matching path's userId can get, update and delete mission.
     * @deny (create) User with ID not matching path's userId cannot create a mission.
     * @deny (get, update, delete) User with ID not matching path's userId cannot get, update and delete mission.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/missions/{missionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}