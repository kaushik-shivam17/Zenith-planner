/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (tasks, timetable events, reminders) nested under `/users/{userId}`.
 * Global data (focus tips) are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user.
 * - /users/{userId}/timetableEvents/{timetableEventId}: Stores timetable events for each user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for each user.
 * - /focus_tips/{focusTipId}: Stores global, publicly readable focus tips.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path.
 * - Focus tips are publicly readable.
 * - No complex role-based access control is implemented in this prototype.
 * - Data validation is minimal in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded within the document path itself, enabling secure path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) Authenticated user cannot create a profile with a different userId.
     * @deny (get, update, delete) Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && (request.resource.data.id == resource.data.id); // enforce immutability of user id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user can create tasks under their own user ID.
     * @allow (get, list, update, delete) Authenticated user can access their own tasks.
     * @deny (create) Authenticated user cannot create tasks under another user ID.
     * @deny (get, list, update, delete) Authenticated user cannot access another user's tasks.
     * @principle Enforces document ownership for all operations on tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.userId == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId); // enforce immutability of user id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to timetable events for a specific user.
     * @path /users/{userId}/timetableEvents/{timetableEventId}
     * @allow (create) Authenticated user can create timetable events under their own user ID.
     * @allow (get, list, update, delete) Authenticated user can access their own timetable events.
     * @deny (create) Authenticated user cannot create timetable events under another user ID.
     * @deny (get, list, update, delete) Authenticated user cannot access another user's timetable events.
     * @principle Enforces document ownership for all operations on timetable events.
     */
    match /users/{userId}/timetableEvents/{timetableEventId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.userId == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId); // enforce immutability of user id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to reminders for a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) Authenticated user can create reminders under their own user ID.
     * @allow (get, list, update, delete) Authenticated user can access their own reminders.
     * @deny (create) Authenticated user cannot create reminders under another user ID.
     * @deny (get, list, update, delete) Authenticated user cannot access another user's reminders.
     * @principle Enforces document ownership for all operations on reminders.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.userId == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId); // enforce immutability of user id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to global focus tips.
     * @path /focus_tips/{focusTipId}
     * @allow (get, list) Public read access for all focus tips.
     * @deny (create, update, delete) Only admin users can create, update, or delete focus tips (not implemented in this prototype).
     * @principle Public read access with restricted write access (admin only, not implemented).
     */
    match /focus_tips/{focusTipId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}