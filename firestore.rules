/**
 * @fileoverview Firestore Security Rules for Zenith Planner.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * create, read, update, and delete data associated with their own user ID.
 *
 * Data Structure:
 * The database is organized with user-specific data nested under the
 * `/users/{userId}` path. This ensures that all data is scoped to a
 * specific user.  BMI history, tasks, and missions are stored as
 * subcollections under each user's document.
 *
 * Key Security Decisions:
 * - Users can only access their own data. There is no listing of all users
 *   or global access to any data.
 * - All write operations are validated to ensure that the authenticated
 *   user ID matches the user ID in the data.
 *
 * Denormalization for Authorization:
 *  The 'userId' field is present on all subcollection documents (BMI, tasks, missions)
 *  to allow for simple, ownership-based security rules without requiring
 *  expensive `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their own profile.
     * @allow (get, update, delete) - User with matching UID can read/update/delete their own profile.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) - User cannot read/update/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCreatingOwner(userId) {
          return isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isCreatingOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to BMI history documents for a specific user.
     * @path /users/{userId}/bmiHistory/{bmiId}
     * @allow (create) - User with matching UID can create BMI records in their own history.
     * @allow (get, list, update, delete) - User with matching UID can read/list/update/delete their own BMI records.
     * @deny (create) - User cannot create BMI records in another user's history.
     * @deny (get, list, update, delete) - User cannot read/list/update/delete another user's BMI records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/bmiHistory/{bmiId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCreatingOwner(userId) {
          return isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isCreatingOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with matching UID can create tasks in their own task list.
     * @allow (get, list, update, delete) - User with matching UID can read/list/update/delete their own tasks.
     * @deny (create) - User cannot create tasks in another user's task list.
     * @deny (get, list, update, delete) - User cannot read/list/update/delete another user's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCreatingOwner(userId) {
          return isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isCreatingOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to mission documents for a specific user.
     * @path /users/{userId}/missions/{missionId}
     * @allow (create) - User with matching UID can create missions in their own mission list.
     * @allow (get, list, update, delete) - User with matching UID can read/list/update/delete their own missions.
     * @deny (create) - User cannot create missions in another user's mission list.
     * @deny (get, list, update, delete) - User cannot read/list/update/delete another user's missions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/missions/{missionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCreatingOwner(userId) {
          return isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isCreatingOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}