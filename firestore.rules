/**
 * @file Firestore Security Rules for Zenith Planner.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model, where each user can only access their own data.
 * All data is nested under /users/{userId}, ensuring clear ownership.
 *
 * @dataStructure Data is organized hierarchically under the /users/{userId} collection. Each user document contains profile information.
 * Subcollections under each user document (bmiHistory, tasks, missions) store associated data.
 *
 * @keySecurityDecisions
 *  - Users can only access their own user document and associated subcollections.
 *  - Listing of all users is not allowed.
 *
 * @denormalizationForAuthorization None needed, the data structure enforces ownership by path.
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can read/write their own profile document.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document for user 'user_abc'.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read/write profile document for user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile. Validate that the userId in the path matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);

      // Only the owner can list user documents (but we will deny this below to prevent user enumeration).
      allow list: if false;

      // Allow a user to update their own profile. Enforce immutability of the userId.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);

      /**
       * @description Controls access to a user's BMI history records.
       * @path /users/{userId}/bmiHistory/{bmiId}
       * @allow (create) User with UID 'user_abc' can create a BMI record under their profile.
       * @allow (get, update, delete) User with UID 'user_abc' can read/write their own BMI records.
       * @deny (create) User with UID 'user_xyz' cannot create a BMI record for user 'user_abc'.
       * @deny (get, update, delete) User with UID 'user_xyz' cannot read/write BMI records for user 'user_abc'.
       * @principle Enforces document ownership for all operations.
       */
      match /users/{userId}/bmiHistory/{bmiId} {
        // Allow a user to create a BMI record under their profile.
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

        // Allow a user to read their own BMI records.
        allow get: if isSignedIn() && isOwner(userId);

        // Allow a user to list their own BMI records.
        allow list: if isSignedIn() && isOwner(userId);

        // Allow a user to update their own BMI record. Enforce immutability of the userId.
        allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allow a user to delete their own BMI record.
        allow delete: if isSignedIn() && isExistingOwner(userId);
      }

      /**
       * @description Controls access to a user's tasks.
       * @path /users/{userId}/tasks/{taskId}
       * @allow (create) User with UID 'user_abc' can create a task under their profile.
       * @allow (get, update, delete) User with UID 'user_abc' can read/write their own tasks.
       * @deny (create) User with UID 'user_xyz' cannot create a task for user 'user_abc'.
       * @deny (get, update, delete) User with UID 'user_xyz' cannot read/write tasks for user 'user_abc'.
       * @principle Enforces document ownership for all operations.
       */
      match /users/{userId}/tasks/{taskId} {
        // Allow a user to create a task under their profile.
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

        // Allow a user to read their own tasks.
        allow get: if isSignedIn() && isOwner(userId);

        // Allow a user to list their own tasks.
        allow list: if isSignedIn() && isOwner(userId);

        // Allow a user to update their own task. Enforce immutability of the userId.
        allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allow a user to delete their own task.
        allow delete: if isSignedIn() && isExistingOwner(userId);
      }

       /**
        * @description Controls access to a user's missions.
        * @path /users/{userId}/missions/{missionId}
        * @allow (create) User with UID 'user_abc' can create a mission under their profile.
        * @allow (get, update, delete) User with UID 'user_abc' can read/write their own missions.
        * @deny (create) User with UID 'user_xyz' cannot create a mission for user 'user_abc'.
        * @deny (get, update, delete) User with UID 'user_xyz' cannot read/write missions for user 'user_abc'.
        * @principle Enforces document ownership for all operations.
        */
      match /users/{userId}/missions/{missionId} {
        // Allow a user to create a mission under their profile.
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

        // Allow a user to read their own missions.
        allow get: if isSignedIn() && isOwner(userId);

        // Allow a user to list their own missions.
        allow list: if isSignedIn() && isOwner(userId);

        // Allow a user to update their own mission. Enforce immutability of the userId.
        allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allow a user to delete their own mission.
        allow delete: if isSignedIn() && isExistingOwner(userId);
      }
    }
  }
}