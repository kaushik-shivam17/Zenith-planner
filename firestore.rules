/**
 * @fileOverview This ruleset enforces a strict user-ownership model for the Zenith Planner application.
 * All data is nested under /users/{userId}, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for a user.
 * - /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}: Stores subtasks for a task.
 * - /users/{userId}/scheduleEntries/{scheduleEntryId}: Stores schedule entries for a user.
 * - /users/{userId}/reminders/{reminderId}: Stores reminders for a user.
 * - /focusTips/{focusTipId}: Stores global focus tips, accessible to all users.
 *
 * Key Security Decisions:
 * - Users can only access their own data, enforced through path-based ownership.
 * - Focus tips are publicly readable.
 * - List operations are restricted to the owner for user-scoped collections.
 *
 * Denormalization for Authorization:
 *  - User ownership is enforced by nesting data under the /users/{userId} path, eliminating the need for get() calls.
 *
 * Structural Segregation:
 * - Public focus tips are stored in a separate top-level collection (/focusTips) to avoid mixing public and private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own profile.
     * @deny (create) - Unauthenticated user cannot create a user profile.
     * @deny (update, delete) - Another authenticated user cannot modify a different user's profile.
     * @principle Enforces user ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to task documents under a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create a task for themselves.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, and delete their own tasks.
     * @deny (create) - Unauthenticated user cannot create a task.
     * @deny (update, delete) - Another authenticated user cannot modify a different user's task.
     * @principle Enforces user ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subtask documents under a specific task.
     * @path /users/{userId}/tasks/{taskId}/subtasks/{subtaskId}
     * @allow (create) - Authenticated user can create a subtask for their task.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, and delete their own subtasks.
     * @deny (create) - Unauthenticated user cannot create a subtask.
     * @deny (update, delete) - Another authenticated user cannot modify a different user's subtask.
     * @principle Enforces user ownership for writes.
     */
    match /users/{userId}/tasks/{taskId}/subtasks/{subtaskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to schedule entry documents under a specific user.
     * @path /users/{userId}/scheduleEntries/{scheduleEntryId}
     * @allow (create) - Authenticated user can create a schedule entry for themselves.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, and delete their own schedule entries.
     * @deny (create) - Unauthenticated user cannot create a schedule entry.
     * @deny (update, delete) - Another authenticated user cannot modify a different user's schedule entry.
     * @principle Enforces user ownership for writes.
     */
    match /users/{userId}/scheduleEntries/{scheduleEntryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to reminder documents under a specific user.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - Authenticated user can create a reminder for themselves.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, and delete their own reminders.
     * @deny (create) - Unauthenticated user cannot create a reminder.
     * @deny (update, delete) - Another authenticated user cannot modify a different user's reminder.
     * @principle Enforces user ownership for writes.
     */
    match /users/{userId}/reminders/{reminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to focus tip documents.
     * @path /focusTips/{focusTipId}
     * @allow (get, list) - All users can get and list focus tips.
     * @deny (create, update, delete) - Only authorized users can create, update, and delete focus tips.
     */
    match /focusTips/{focusTipId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}